load("@bazel_skylib//rules:write_file.bzl", "write_file")

filegroup(
    name = "sysroot_files",
    srcs = glob(
        include = [
            "include/**",
            "lib/**",
            "lib64/**",
            "usr/include/**",
            "usr/local/**",
            "usr/lib/**",
            "usr/lib64/**",
            "usr/bin/ptxas",
            "usr/bin/fatbinary",
            "etc/fonts/**",
        ],
        exclude = [
            "usr/share/**",
        ],
    ) + glob(
        include = [
            "usr/share/gir-1.0/**",
            "usr/share/fonts/**",
        ],
    ),
    visibility = ["//visibility:public"],
)

write_file(
    name = "generate_wrapper",
    out = "wrapped_bin/Xvfb.sh",
    content = ["""\
#!/bin/bash

# --- begin runfiles.bash initialization v2 ---
# Copy-pasted from the Bazel Bash runfiles library v2.
set -uo pipefail; set +e; f=bazel_tools/tools/bash/runfiles/runfiles.bash
source "${RUNFILES_DIR:-/dev/null}/$f" 2>/dev/null || \
  source "$(grep -sm1 "^$f " "${RUNFILES_MANIFEST_FILE:-/dev/null}" | cut -f2- -d' ')" 2>/dev/null || \
  source "$0.runfiles/$f" 2>/dev/null || \
  source "$(grep -sm1 "^$f " "$0.runfiles_manifest" | cut -f2- -d' ')" 2>/dev/null || \
  source "$(grep -sm1 "^$f " "$0.exe.runfiles_manifest" | cut -f2- -d' ')" 2>/dev/null || \
  { echo>&2 "ERROR: cannot find $f"; exit 1; }; f=; set -e
# --- end runfiles.bash initialization v2 ---


runfiles_export_envvars

export LD_LIBRARY_PATH="${RUNFILES_DIR}/amd64_debian_sysroot/usr/lib/x86_64-linux-gnu"
export LD_LIBRARY_PATH+=":${RUNFILES_DIR}/amd64_debian_sysroot/lib/x86_64-linux-gnu"

exec "${RUNFILES_DIR}/amd64_debian_sysroot/usr/bin/Xvfb" "$@"
"""],
    is_executable = True,
)

sh_binary(
    name = "wrapped_bin/Xvfb",
    srcs = ["wrapped_bin/Xvfb.sh"],
    data = glob([
        "usr/lib/**/*",
        "lib/**/*",
        "usr/bin/*",
    ]),
    visibility = ["//visibility:public"],
    deps = [
        "@bazel_tools//tools/bash/runfiles",
    ],
)

TEMPLATE = """\
#!/bin/bash

set -ex

# --- begin runfiles.bash initialization v2 ---
# Copy-pasted from the Bazel Bash runfiles library v2.
set -uo pipefail; f=bazel_tools/tools/bash/runfiles/runfiles.bash
source "${RUNFILES_DIR:-/dev/null}/$f" 2>/dev/null || \
  source "$(grep -sm1 "^$f " "${RUNFILES_MANIFEST_FILE:-/dev/null}" | cut -f2- -d' ')" 2>/dev/null || \
  source "$0.runfiles/$f" 2>/dev/null || \
  source "$(grep -sm1 "^$f " "$0.runfiles_manifest" | cut -f2- -d' ')" 2>/dev/null || \
  source "$(grep -sm1 "^$f " "$0.exe.runfiles_manifest" | cut -f2- -d' ')" 2>/dev/null || \
  { echo>&2 "ERROR: cannot find $f"; exit 1; }; f=; set -e
# --- end runfiles.bash initialization v2 ---

add_ld_library_path_for() {
  local file="$1"
  local dir
  local resolved_file
  if ! resolved_file="$(rlocation "amd64_debian_sysroot/$file")"; then
    echo "Couldn't find file amd64_debian_sysroot/${file}" >&2
    exit 1
  fi
  dir="$(dirname "${resolved_file}")"
  export LD_LIBRARY_PATH="${dir}${LD_LIBRARY_PATH:+:$LD_LIBRARY_PATH}"
}

add_ld_library_path_for usr/lib/x86_64-linux-gnu/libbsd.so.0.11.7
add_ld_library_path_for lib/x86_64-linux-gnu/libreadline.so.8.2

exec $(rlocation amd64_debian_sysroot/usr/lib/postgresql/15/bin/%s) "$@"
"""

[(
    write_file(
        name = "generate_%s_wrapper" % binary,
        out = "%s.sh" % binary,
        content = [TEMPLATE % binary],
    ),
    sh_binary(
        name = binary,
        srcs = ["%s.sh" % binary],
        data = glob([
            "usr/lib/**/*",
            "usr/share/postgresql/**/*",
            "lib/**/*",
        ]),
        visibility = ["//visibility:public"],
        deps = [
            "@bazel_tools//tools/bash/runfiles",
        ],
    ),
) for binary in (
    "postgres",
    "psql",
    "initdb",
)]

# Don't include libraries which need to come from the host.
# https://peps.python.org/pep-0513/
system_libraries = [
    "libc.so.6",
    "libm.so.6",
    "libdl.so.2",
    "librt.so.1",
    "libc.so.6",
    "libnsl.so*",
    "libutil.so.1",
    "libpthread.so.0",
    "libresolv.so*",
    "libX11.so.6*",
    "libXext.so*",
    "libXrender.so*",
    "libICE.so*",
    "libSM.so*",
    "libGL.so*",
    "libgobject-2.0.so*",
    "libgthread-2.0.so*",
    "libglib-2.0.so*",
]

filegroup(
    name = "python_sysroot_files",
    srcs = glob(
        include = [
            "include/**",
            "lib/**",
            "lib64/**",
            "usr/include/**",
            "usr/local/**",
            "usr/lib/**",
            "usr/lib64/**",
            "usr/bin/ptxas",
            "usr/bin/fatbinary",
            "etc/fonts/**",
        ],
        exclude = ["usr/share/**"] + ["usr/lib/x86_64-linux-gnu/%s" % (lib,) for lib in system_libraries] +
                  ["lib/x86_64-linux-gnu/%s" % (lib,) for lib in system_libraries],
    ) + glob(
        include = [
            "usr/share/gir-1.0/**",
            "usr/share/fonts/**",
        ],
    ),
    visibility = ["//visibility:public"],
)

# This one needs to be done special so we link against the one in the sysroot,
# but actually use the one from the host.  NVIDIA gets really grumpy when the
# version of the driver you have installed doesn't match the libraries in use.
cc_library(
    name = "cudart",
    additional_linker_inputs = [
        "usr/lib/x86_64-linux-gnu/libcuda.so.1",
        "usr/lib/x86_64-linux-gnu/libcudart.so.11.0",
    ],
    linkopts = [
        "external/amd64_debian_sysroot/usr/lib/x86_64-linux-gnu/libcuda.so.1",
        "external/amd64_debian_sysroot/usr/lib/x86_64-linux-gnu/libcudart.so.11.0",
    ],
    visibility = ["//visibility:public"],
)

{{ RULES }}
